//SSキャプチャセッティング――――――――――――――――――――――――――――――――――
*sssetting
	nidPush

	gsel WND_MAIN
	gosub *SSModeControlDisable

	availableCap = FALSE

	SetLayeredWindowAttributes WND_INFO(WND_MAIN, WI_HANDLE), 0x00000000, 0, LWA_ALPHA
	SetLayeredWindowAttributes WND_INFO(WND_GRID, WI_HANDLE), 0x00000000, 0, LWA_ALPHA
	SetLayeredWindowAttributes WND_INFO(WND_TWITTER, WI_HANDLE), 0x00000000, 0, LWA_ALPHA

	if autoSearch {
		//新座標検出===========================================

		gsel WND_MAIN
		LogOut "艦これの画面にマウスカーソルを重ねてください。"

		buffer WND_TEMP1, disinfo(2), disinfo(3)
		BitBlt hdc, 0,0, disinfo(2), disinfo(3), hdcScreen,  disinfo(0), disinfo(1), SRCCOPY | CAPTUREBLT: redraw

		dim sscap_, 4
		count = Auto@SearchKanCollePos(WND_TEMP1, sscap_, WND_TEMP2) //戻り値は見つかった個数
		logmes "getKanCollePosAuto "+count
		if (count >= 1){
			//成功
			if (count == 1){
				//見つけたウィンドウが1つだった時
				sscap(0) = sscap_(0) + disInfo(0)
				sscap(1) = sscap_(1) + disInfo(1)
				sscap(2) = sscap_(0) + sscap_(2) + disInfo(0)
				sscap(3) = sscap_(1) + sscap_(3) + disInfo(1)
			} else {
				//見つけたウィンドウ複数だった場合
				repeat count
					sscap_(0, cnt) += disInfo(0)
					sscap_(1, cnt) += disInfo(1)
					sscap_(2, cnt) += sscap_(0, cnt)
					sscap_(3, cnt) += sscap_(1, cnt)
				loop
				sscap(0) = 0
				sscap(1) = 0
				sscap(2) = 0
				sscap(3) = 0
				SetLayeredWindowAttributes WND_INFO(WND_MAIN, WI_HANDLE), 0x00000000, 255, LWA_ALPHA
				LogOut "複数の画面を検出\n緑色の領域をクリック！"
				ShowSelectWindow sscap_, WND_INFO(WND_MAIN, WI_HANDLE)
				repeat //本当はこんなことしたくないんだけど…今後改善予定
					stick sti,, 0
					if sti: break
					if ( sscap(2)-sscap(0) ) != 0: break
					await 16
				loop
				HideSelectWindow
			}

		} else {
			//失敗
			dim KCRect, 4
			successflg = FALSE

			MoveWindow WND_INFO(WND_OVERLAY, WI_HANDLE), 0, 0, 0, 0, 1
			gsel WND_OVERLAY, 2
			gsel WND_IMAGE_BUF2, 2
			gsel WND_MAIN, 0

			repeat

				MoveWindow WND_INFO(WND_IMAGE_BUF2, WI_HANDLE), ginfo_mx+1, ginfo_my+1, imageBuf2W, imageBuf2H,1

				count = SemiAuto@SearchKanCollePos(WND_TEMP1, rectangles, ginfo_mx-disInfo(0), ginfo_my-disInfo(1))
                if (count >= 1){
                    KCRect(0) = rectangles(0, 0) + disInfo(0)
                    KCRect(1) = rectangles(1, 0) + disInfo(1)
                    KCRect(2) = rectangles(0, 0) + rectangles(2, 0) + disInfo(0)
                    KCRect(3) = rectangles(1, 0) + rectangles(3, 0) + disInfo(1)
					MoveWindow WND_INFO(WND_OVERLAY, WI_HANDLE), KCRect(0), KCRect(1), KCRect(2)-KCRect(0), KCRect(3)-KCRect(1), 1
					successflg = TRUE
				} else {
					KCRect(0) = -1, -1, -1, -1
					MoveWindow WND_INFO(WND_OVERLAY, WI_HANDLE), 0, 0, 0, 0, 1
					successflg = FALSE
				}

				stick sti, , 0
				if (sti & 256){
					if (successflg){
						sscap(0) = KCRect(0)
						sscap(1) = KCRect(1)
						sscap(2) = KCRect(2)
						sscap(3) = KCRect(3)
					} else {
						sscap(0) = 0, 0, 0, 0
					}

					break
				}
				if (sti & 128){
					sscap(0) = 0, 0, 0, 0
					break
				}

				await 33

			loop
			gsel WND_OVERLAY, -1
			gsel WND_IMAGE_BUF2, -1
		//マウスオーバー取得終わり
		}
		//新座標検出終わり

	} else {
		//手動取得
		buffer WND_TEMP1, disinfo(2), disinfo(3)
		BitBlt hdc, 0,0, disinfo(2), disinfo(3), hdcScreen,  disinfo(0), disinfo(1),SRCCOPY | CAPTUREBLT: redraw

		bgscr WND_TEMP_SCR1, disinfo(2), disinfo(3), 2: SET_WND_INFO
		font "メイリオ", 30

		gcopy WND_TEMP1, 0, 0, disinfo(2), disinfo(3)
		color 128,128,128
		repeat (disinfo(3) / 120)+1
			ycnt = cnt
			repeat (disinfo(2) / 500)+2
				pos (cnt*600)+(ycnt*70)-800,ycnt*200
				mes "艦これ一覧めいかー　座標取得中"
			loop
		loop
		color 255,255,255
		boxf abs(disinfo(0)), abs(disinfo(1)), abs(disinfo(0))+970, abs(disinfo(1))+45
		color
		pos abs(disinfo(0))+5, abs(disinfo(1))+2
		mes "艦これの画面を覆うようにドラッグしてください Escキーでキャンセル"

		count = Manual@SearchKanCollePos(WND_TEMP1, rectangles, WND_OVERLAY, WND_TEMP_SCR1, TRUE)
		if (count >= 1) {
			dim sscap, 4
			sscap(0) = rectangles(0, 0) + disinfo(0)
			sscap(1) = rectangles(1, 0) + disinfo(1)
			sscap(2) = sscap(0) + rectangles(2, 0) + 1
			sscap(3) = sscap(1) + rectangles(3, 0) + 1
		}else{
			dim sscap, 4
		}
	}

	gosub *CaptureMethodDecide

	SetLayeredWindowAttributes WND_INFO(WND_MAIN, WI_HANDLE), 0x00000000, 255, LWA_ALPHA
	SetLayeredWindowAttributes WND_INFO(WND_GRID, WI_HANDLE), 0x00000000, 255, LWA_ALPHA
	SetLayeredWindowAttributes WND_INFO(WND_TWITTER, WI_HANDLE), 0x00000000, 255, LWA_ALPHA

	gosub *SSSettingCheck
	nidPop
return

*AutoPosGetSelWindow
	sscap(0) += sscap_(0, wparam)
	sscap(1) += sscap_(1, wparam)
	sscap(2) += sscap_(2, wparam)
	sscap(3) += sscap_(3, wparam)
return


*CaptureMethodDecide
	nidPush

	captureMethod = CM_BITBLT
	positionType = PT_ABSOLUTE

	sscapwh(0) = sscap(2)-sscap(0), sscap(3)-sscap(1)

	if (sscapwh(0) < 50) || (sscapwh(1) < 30): return

	if (dcClient): ReleaseDC dcClient

	dim rect, 4
	dim scrPoint, 2
	dim cliPoint, 2
	hClient = 0

	scrPosX = sscap(0)
	scrPosY = sscap(1)
	scrPoint(0) = scrPosX, scrPosY

	//艦これのあるウィンドウのハンドル
	hClient = WindowFromPoint(scrPosX, scrPosY)

	cliPoint(0) = scrPoint(0), scrPoint(1)

	ScreenToClient hClient, varptr(cliPoint)
	cliPosX = cliPoint(0)
	cliPosY = cliPoint(1)

	dim clientSize, 2
	GetClientRect hClient, varptr(rect)
	clientSize(0) = rect(2)
	clientSize(1) = rect(3)
	clientScrX = rect(0)
	clientScrY = rect(1)

	GetWindowRect hClient, varptr(rect)
	clientScrX = rect(0)
	clientScrY = rect(1)

	//buffer WND_TEMP1, clientSize(0), clientSize(1)
	buffer WND_TEMP1, clientSize(0), clientSize(1)

	buffer WND_TEMP2, sscapwh(0), sscapwh(1)
	mref temp2vram, 66

	if (maxSearchLevel >= 2){

		gsel WND_TEMP1
		PrintWindow hClient, hdc, 1: redraw

		gsel WND_TEMP2
		gcopy WND_TEMP1, cliPoint(0), cliPoint(1), sscapwh(0), sscapwh(1)

		isfilled temp2vram, sscapwh(0), sscapwh(1)
		if (stat==0){
			validRectFlg = isValidRect@SearchKanCollePos(WND_TEMP1, cliPosX, cliPosY, sscapwh(0), sscapwh(1))
			if (validRectFlg){

				sscap(0) = cliPoint(0)
				sscap(1) = cliPoint(1)
				sscap(2) = sscap(0)+sscapwh(0)
				sscap(3) = sscap(1)+sscapwh(1)

				buffer WND_PRINTWND, clientSize(0), clientSize(1)
				SET_WND_INFO

				captureMethod = CM_PRINTWINDOW
				positionType = PT_RELATIVE
				nidPop
				return
			}
		}

		dcClient = GetDC(hClient)

		gsel WND_TEMP1
		BitBlt hdc, 0, 0, clientSize(0), clientSize(1), dcClient, 0, 0, SRCCOPY | CAPTUREBLT: redraw

		gsel WND_TEMP2
		gcopy WND_TEMP1, cliPoint(0), cliPoint(1), sscapwh(0), sscapwh(1)

		isfilled temp2vram, sscapwh(0), sscapwh(1)
		if (stat==0){
			validRectFlg = isValidRect@SearchKanCollePos(WND_TEMP1, cliPosX, cliPosY, sscapwh(0), sscapwh(1))
			if (validRectFlg){
				sscap(0) = cliPoint(0)
				sscap(1) = cliPoint(1)
				sscap(2) = sscap(0)+sscapwh(0)
				sscap(3) = sscap(1)+sscapwh(1)

				captureMethod = CM_BITBLT
				positionType = PT_RELATIVE
				nidPop
				return
			}
		}
		ReleaseDC dcClient

	}

	if (maxSearchLevel >= 1){

		gsel WND_TEMP1
		BitBlt hdc, 0, 0, clientSize(0), clientSize(1), hdcScreen, clientScrX, clientScrY, SRCCOPY | CAPTUREBLT: redraw

		gsel WND_TEMP2
		gcopy WND_TEMP1, cliPoint(0), cliPoint(1), sscapwh(0), sscapwh(1)

		isfilled temp2vram, sscapwh(0), sscapwh(1)
		if (stat==0){
			validRectFlg = isValidRect@SearchKanCollePos(WND_TEMP1, cliPosX, cliPosY, sscapwh(0), sscapwh(1))
			logmes "validRectFlg=" + validRectFlg
			if (validRectFlg){
				sscap(0) = cliPoint(0)
				sscap(1) = cliPoint(1)
				sscap(2) = sscap(0)+sscapwh(0)
				sscap(3) = sscap(1)+sscapwh(1)

				captureMethod = CM_BITBLT
				positionType = PT_WNDABSOLUTE
				nidPop
				return
			}
		}
	}

	nidPop
return

*SSSettingCheck
	nidPush

	luposx = sscap(0)
	luposy = sscap(1)
	rdposx = sscap(2)
	rdposy = sscap(3)
	sscapwh(0) = sscap(2)-sscap(0), sscap(3)-sscap(1)

	gsel WND_MAIN,1+frontrow

	if ( sscapwh(0) >= 79 && sscapwh(1) >= 47 ){

		switch positionType
			case PT_ABSOLUTE
				ssCapMes = strf("%d,%d", sscap(0), sscap(1))
				swbreak
			case PT_RELATIVE
				ssCapMes = "追跡中S"
				swbreak
			case PT_WNDABSOLUTE
				ssCapMes = "追跡中A"
				swbreak
		swend
		objprm SSCapIId,sscapmes

		if (mode == MODE_SSCAP ){
			objprm luposxIId, luposx
			objprm luposyIId, luposy
			objprm rdposxIId, rdposx
			objprm rdposyIId, rdposy
		}
		if (dispcap && (mode == MODE_SSCAP)){
			gosub *SSCaptureOnMemory
			pos 0, dispcapy
			gzoom Scale(175), Scale(105), WND_CAPTURE, 0, 0, sscapwh(0), sscapwh(1)
		}

		gosub *SSModeControlEnable

		availableCap = TRUE
		LogOut "座標の取得に成功しました"
		if autoSearch: autoSearchFailureCount = 0

	} else {

		if (dispcap && (mode == MODE_SSCAP)){
			syscolor 16
			boxf 0, dispcapy, Scale(175), dispcapy+Scale(105)
			syscolor 15
			boxf Scale(3), dispcapy+Scale(3), Scale(171), dispcapy+Scale(101)
			color
		}
		if (mode != MODE_OPTION){
			sscapmes = "取得する"
			objprm SSCapIId, sscapmes
		}

		if seqcapf: gosub *seqcap

		LogOut "座標を取得できません\n詳細はreadmeをお読みください"

		gosub *SSModeControlDisable

		availablecap = FALSE

		if autoSearch{
			autoSearchFailureCount++
			if autoSearchFailureCount = 4{
				dialog "自動取得に連続して失敗しました\n手動取得に切り替えもう一度座標取得しますか？",2,""
				if stat = 7:autoSearchFailureCount = 0
			}
		}

	}

	gsel WND_MAIN
	gosub *SSModeControlEnable

	if (hotkeyset && availablecap) {
		title "*"+SOFTNAME, WND_INFO(WND_MAIN, WI_HANDLE)
	} else {
		title SOFTNAME, WND_INFO(WND_MAIN, WI_HANDLE)
	}

	if (autoSearch) {
		if autoSearchFailureCount = 4{
			autoSearchFailureCount = 0
			autoSearch = 0
			objprm autoSearchCId,autoSearch
			gosub *sssetting
		}
	}
	gosub *SupportWndDisp
	nidPop
return

#deffunc GetAbsPos var p1_, var p2_

	if (positionType == PT_RELATIVE || positionType = PT_WNDABSOLUTE){

		if (IsWindow(hClient) == 0){

			ssCap(0) = 0, 0, 0, 0
			hClient = 0
			ReleaseDC dcClient
			if seqCapf: gosub *seqcap

			gosub *ssSettingCheck

			LogOut "艦これの画面を見失いました(1)"
			nidPop
			return 1
		}

		if (positionType==PT_RELATIVE){

			GetClientRect hClient, varptr(rect)
			if (clientSize(0) != (rect(2)-rect(0))) | (clientSize(1) != (rect(3)-rect(1))){

				ssCap(0) = 0, 0, 0, 0
				hClient = 0
				ReleaseDC dcClient
				if seqCapf: gosub *seqcap

				gosub *ssSettingCheck

				LogOut "艦これの画面を見失いました(2)"
				nidPop
				return 1
			}
		}

	}

	switch captureMethod
		case CM_BITBLT
			switch positionType
				case PT_RELATIVE
				case PT_WNDABSOLUTE
					scrPoint = sscap(0), sscap(1)
					ClientToScreen hClient, varptr(scrPoint)
					p1_ = scrPoint(0)
					p2_ = scrPoint(1)
				swbreak
				case PT_ABSOLUTE
					p1_ = sscap(0)
					p2_ = sscap(1)
				swbreak
			swend
		swbreak
		case CM_PRINTWINDOW
			scrPoint = sscap(0), sscap(1)
			ClientToScreen hClient, varptr(scrPoint)
			p1_ = scrPoint(0)
			p2_ = scrPoint(1)
		swbreak
	swend
return 0
